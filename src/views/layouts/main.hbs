<!doctype html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Lr Informática</title>
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="/public/images/titlePageicon.png"
    />

    <!-- Inportação e configuração da fonte Inter -->
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />

    <!-- Importação do tailwind-->
    <!--<link href="/public/css/styles.css" rel="stylesheet">-->
    <script src="https://cdn.tailwindcss.com"></script>
  </head>

  <body class="bg-gray-100 font-inter transition-all">
    <!-- Navbar -->
    <nav
      class="bg-[#2A3DA4] py-0 px-3 flex flex-row gap-32 max-[1000px]:gap-16 w-full justify-between items-center"
    >
      {{> navbar}}
    </nav>
    <!-- Menu ADM -->
    <div class="bg-gray-100 border-[#2A3DA4] border-2 p-2 flex flex-row w-full justify-between items-start">
      {{> header}}
    </div>

    <!-- Overlay (escurecimento de fundo) -->
    <div
      id="overlay"
      class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden"
    ></div>

    <div
      id="offcanvas"
      class="fixed top-0 left-0 h-full w-64 bg-gradient-to-b from-[#2A3DA4] to-transparent shadow-lg transform -translate-x-full transition-transform z-50"
    >
      {{> offcanvas}}
    </div>

    <section id="sessao1">
      {{> content}}
    </section>

    <footer
      class="w-full bg-[#2A3DA4] h-fit m-0 flex flex-col text-white gap-2"
    >
      {{> footer}}
    </footer>

    <!-- Script JavaScript -->
    <script>
      {// Função para abrir o offcanvas
        const openCanvasButton = document.getElementById('openCanvas');
      const closeCanvasButton = document.getElementById('closeCanvas');
      const offcanvas = document.getElementById('offcanvas');
      const overlay = document.getElementById('overlay');
      
      openCanvasButton.addEventListener('click', () => {
        offcanvas.classList.remove('-translate-x-full');
        overlay.classList.remove('hidden');
      });

      // Função para fechar o offcanvas
      closeCanvasButton.addEventListener('click', () => {
        offcanvas.classList.add('-translate-x-full');
        overlay.classList.add('hidden');
      });

      // Fechar o offcanvas ao clicar no overlay
      overlay.addEventListener('click', () => {
        offcanvas.classList.add('-translate-x-full');
        overlay.classList.add('hidden');
      });

      const carousel = document.getElementById('carousel');
      const totalSlides = carousel.children.length;
      let currentSlide = 0;

      // Função para mover o carrossel para o slide desejado
      function moveToSlide(slideIndex) {
        const offset = -slideIndex * 100; // Move o carrossel pela largura dos slides
        carousel.style.transform = `translateX(${offset}%)`;
      }

      // Botão para o slide anterior
      document.getElementById('prevButton').addEventListener('click', () => {
        currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
        moveToSlide(currentSlide);
        resetAutoSlide(); // Reinicia o temporizador
      });

      // Botão para o próximo slide
      document.getElementById('nextButton').addEventListener('click', () => {
        currentSlide = (currentSlide + 1) % totalSlides;
        moveToSlide(currentSlide);
        resetAutoSlide(); // Reinicia o temporizador
      });

      // Mudança automática de slides
      function autoSlide() {
        currentSlide = (currentSlide + 1) % totalSlides;
        moveToSlide(currentSlide);
      }

      let slideInterval = setInterval(autoSlide, 10000); // Troca de slide a cada 3 segundos

      // Função para reiniciar o temporizador quando o usuário interage com o carrossel
      function resetAutoSlide() {
        clearInterval(slideInterval); // Para o temporizador atual
        slideInterval = setInterval(autoSlide, 8000); // Reinicia o temporizador
      }
      }

      {// Função para buscar computadores

  document.getElementById('buscarComputador').addEventListener('input', async (event) => {
    const termo = event.target.value;
    if (termo.length >= 3) { // Busca apenas após 3 caracteres
      const response = await fetch(`/computador/buscar?termo=${termo}`);
      const computadores = await response.json();
      const resultadosDiv = document.getElementById('resultadosComputador');
      resultadosDiv.innerHTML = computadores.map(computador => `
        <div class="p-2 border-b border-gray-200 cursor-pointer hover:bg-gray-100"
             onclick="selecionarComputador(${JSON.stringify(computador)})">
          ${computador.nome} - ${computador.especificacao}
        </div>
      `).join('');
    } else {
      document.getElementById('resultadosComputador').innerHTML = '';
    }
  });

  // Função para selecionar um computador
  function selecionarComputador(computador) {
    const computadoresDiv = document.getElementById('computadores');
    const novoComputador = document.createElement('div');
    novoComputador.className = 'computador grid grid-cols-1 md:grid-cols-2 gap-4 mb-4';
    novoComputador.innerHTML = `
      <input type="text" name="computadores[${computadorCount}][nome]" value="${computador.nome}" required />
      <input type="text" name="computadores[${computadorCount}][especificacao]" value="${computador.especificacao}" required />
      <input type="number" step="0.01" name="computadores[${computadorCount}][valor]" value="${computador.valor}" required />
      <input type="url" name="computadores[${computadorCount}][link]" value="${computador.link}" required />
    `;
    computadoresDiv.appendChild(novoComputador);
    computadorCount++;
    document.getElementById('resultadosComputador').innerHTML = ''; // Limpa os resultados
  }

  // Função para buscar periféricos
  document.getElementById('buscarPeriferico').addEventListener('input', async (event) => {
    const termo = event.target.value;
    if (termo.length >= 3) { // Busca apenas após 3 caracteres
      const response = await fetch(`/periferico/buscar?termo=${termo}`);
      const perifericos = await response.json();
      const resultadosDiv = document.getElementById('resultadosPeriferico');
      resultadosDiv.innerHTML = perifericos.map(periferico => `
        <div class="p-2 border-b border-gray-200 cursor-pointer hover:bg-gray-100"
             onclick="selecionarPeriferico(${JSON.stringify(periferico)})">
          ${periferico.nome} - ${periferico.especificacao}
        </div>
      `).join('');
    } else {
      document.getElementById('resultadosPeriferico').innerHTML = '';
    }
  });

  // Função para selecionar um periférico
  function selecionarPeriferico(periferico) {
    const perifericosDiv = document.getElementById('perifericos');
    const novoPeriferico = document.createElement('div');
    novoPeriferico.className = 'periferico grid grid-cols-1 md:grid-cols-2 gap-4 mb-4';
    novoPeriferico.innerHTML = `
      <input type="text" name="perifericos[${perifericoCount}][nome]" value="${periferico.nome}" required />
      <input type="text" name="perifericos[${perifericoCount}][especificacao]" value="${periferico.especificacao}" required />
      <input type="number" step="0.01" name="perifericos[${perifericoCount}][valor]" value="${periferico.valor}" required />
      <input type="url" name="perifericos[${perifericoCount}][link]" value="${periferico.link}" required />
    `;
    perifericosDiv.appendChild(novoPeriferico);
    perifericoCount++;
    document.getElementById('resultadosPeriferico').innerHTML = ''; // Limpa os resultados
  }

  let computadorCount = 1;
  let perifericoCount = 1;
      }
    
      {// Função para apresentar imagem

    function previewImage(imageUrl) {
    const previewImageElement = document.getElementById('previewImage');

      if (imageUrl) {
        // Atualiza o src da imagem
        previewImageElement.src = imageUrl;
        // Exibe a imagem
        previewImageElement.classList.remove('hidden');
      } else {
        // Oculta a imagem se o campo estiver vazio
        previewImageElement.classList.add('hidden');
      }
    }
  }
    
      {// Função para...

      }

    </script>
  </body>
</html>
